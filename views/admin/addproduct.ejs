<%- include("../admin/partials/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <style>
        /* Additional styles to ensure cropper is visible */
        .image-cropper {
            margin-top: 20px;
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
        }
        #croppedImg {
            display: block;
            max-width: 100%;
        }
        .cropper-container {
            max-width: 100% !important;
        }
    </style>
</head>

<div class="p-6 bg-gray-100">
   <h2 class="text-2xl font-semibold text-primary-800 mb-6 font-bold">Add New Product</h2>
   
   <div class="bg-white rounded-lg shadow-md">
       <div class="p-6">
           <form id="addProductsForm" method="post" action="/admin/addProducts" enctype="multipart/form-data" novalidate>
               <div class="mb-4">
                   <label for="product_name" class="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                   <input type="text" placeholder="Type here" name="name" class="w-full px-3 py-2 border border-gray-300 rounded-md" id="product_name" required>
                   <div id="product_name-error" class="text-red-500 text-sm mt-1"></div>
               </div>
               
               <div class="mb-4">
                   <label class="block text-sm font-medium text-gray-700 mb-1">Brand</label>
                   <select class="w-full px-3 py-2 border border-gray-300 rounded-md" name="brand" required>
                       <option value="">Select Brand</option>
                       <% brands.forEach(function(brand) { %>
                        <option value="<%= brand._id %>"><%= brand.name %></option>
                        <% }); %>
                       
                   </select>
                   <div id="brand-error" class="text-red-500 text-sm mt-1"></div>
               </div>
               
               <div class="mb-4">
                   <label class="block text-sm font-medium text-gray-700 mb-1">Full description</label>
                   <textarea placeholder="Type here" id="descriptionid" name="description" class="w-full px-3 py-2 border border-gray-300 rounded-md" rows="4" required></textarea>
                   <div id="description-error" class="text-red-500 text-sm mt-1"></div>
               </div>
               
               <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                   <div>
                       <label class="block text-sm font-medium text-gray-700 mb-1">Regular price</label>
                       <input placeholder="₹" name="regularPrice" type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md" required>
                       <div id="regularPrice-error" class="text-red-500 text-sm mt-1"></div>
                   </div>
                   <div>
                       <label class="block text-sm font-medium text-gray-700 mb-1">Sale price</label>
                       <input placeholder="₹" name="salePrice" type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md" required>
                       <div id="salePrice-error" class="text-red-500 text-sm mt-1"></div>
                   </div>
                   <div>
                       <label class="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                       <input placeholder="" name="quantity" type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md" required>
                       <div id="quantity-error" class="text-red-500 text-sm mt-1"></div>
                   </div>
               </div>
               
               <div class="mb-4">
                   <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                   <select class="w-full px-3 py-2 border border-gray-300 rounded-md" name="category" required>
                       <option value="">Select Category</option>
                       <% categories.forEach(function(cat) { %>
                        <option value="<%= cat._id %>"><%= cat.name %></option>
                        <% }); %>
                   </select>
                   <div id="category-error" class="text-red-500 text-sm mt-1"></div>
               </div>
               
               <div class="bg-white rounded-lg shadow-md mb-4">
                   <div class="p-4 border-b">
                       <h4 class="text-lg font-semibold">Product Image</h4>
                   </div>
                   <div class="p-4">
                       <div id="addedImagesContainer" class="flex flex-wrap gap-4 mb-4"></div>
                       <div class="space-y-2">
                           <label class="block text-sm font-medium text-gray-700 mb-1">
                               Select up to 3 images (you'll be able to crop each one)
                           </label>
                           <input class="w-full px-3 py-2 border border-gray-300 rounded-md" 
                               type="file" name="image" id="imageInput"
                               accept="image/png, image/jpeg, image/jpg" multiple
                               required>
                       </div>
                       
                       <!-- Cropping interface -->
                       <div id="cropperContainer" class="image-cropper hidden">
                           <div class="text-center mb-3">
                               <span class="font-medium">Crop Image</span>
                               <span id="cropperIndex" class="ml-2 text-gray-500"></span>
                           </div>
                           <div style="max-width: 500px; margin: 0 auto;">
                               <img id="croppedImg" src="" alt="Image to crop">
                           </div>
                           <div class="flex justify-center mt-4">
                               <button type="button" id="saveButton" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700">
                                   Save Crop
                               </button>
                           </div>
                       </div>
                       
                       <div id="image-error" class="text-red-500 text-sm mt-2"></div>
                   </div>
               </div>
               
               <div>
                   <button type="submit" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700">Publish</button>
               </div>
           </form>
       </div>
   </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script>
    // Debugging helper
    function showDebug(message) {
        console.log(message);
    }

    // Global variables
    let cropper = null;
    let imagesToProcess = [];
    let currentImageIndex = 0;
    let processedImages = [];

    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
        showDebug('Page loaded');
        setupImageInput();
    });

    // Set up the image input event handler
    function setupImageInput() {
        document.getElementById('imageInput').addEventListener('change', function(e) {
            const files = this.files;
            showDebug(`Selected ${files.length} files`);
            
            // Validate file count
            if (files.length > 3) {
                Toastify({
                    text: "Please select maximum 3 images",
                    duration: 3000,
                    backgroundColor: "red",
                }).showToast();
                this.value = '';
                return;
            }
            
            if (files.length === 0) return;
            
            // Reset everything
            resetCropping();
            
            // Store files and start processing
            imagesToProcess = Array.from(files);
            startImageProcessing();
        });
    }

    // Reset all cropping data
    function resetCropping() {
        // Clear cropper if exists
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        
        // Reset variables
        currentImageIndex = 0;
        processedImages = [];
        
        // Clear preview container
        document.getElementById('addedImagesContainer').innerHTML = '';
    }

    // Start the image processing workflow
    function startImageProcessing() {
        showDebug('Starting image processing');
        if (imagesToProcess.length === 0) return;
        
        // Process first image
        processCurrentImage();
    }

    // Process the current image
    function processCurrentImage() {
        showDebug(`Processing image ${currentImageIndex + 1} of ${imagesToProcess.length}`);
        
        // Update UI to show which image we're processing
        document.getElementById('cropperIndex').textContent = `(${currentImageIndex + 1}/${imagesToProcess.length})`;
        
        // Get current file
        const file = imagesToProcess[currentImageIndex];
        
        // Read the file
        const reader = new FileReader();
        reader.onload = function(e) {
            const img = document.getElementById('croppedImg');
            img.src = e.target.result;
            
            // Wait for image to load
            img.onload = function() {
                // Show cropper container
                document.getElementById('cropperContainer').classList.remove('hidden');
                
                // Initialize cropper
                initializeCropper(img);
            };
        };
        reader.readAsDataURL(file);
    }

    // Initialize the cropper on the image
    function initializeCropper(img) {
        showDebug('Initializing cropper');
        
        // Destroy existing cropper if any
        if (cropper) {
            cropper.destroy();
        }
        
        // Create new cropper
        cropper = new Cropper(img, {
            viewMode: 1,
            dragMode: 'move',
            aspectRatio: NaN,
            autoCropArea: 0.8,
            restore: false,
            guides: true,
            center: true,
            highlight: true,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
        });
        
        // Setup save button handler
        setupSaveButton();
    }

    // Set up the save button handler
    function setupSaveButton() {
        document.getElementById('saveButton').onclick = function() {
            saveCroppedImage();
        };
    }

    // Save the cropped image
    function saveCroppedImage() {
        showDebug('Saving cropped image');
        
        if (!cropper) {
            showDebug('Error: No cropper instance');
            return;
        }
        
        try {
            // Get cropped canvas
            const canvas = cropper.getCroppedCanvas({
                maxWidth: 800,
                maxHeight: 800,
                fillColor: '#fff'
            });
            
            if (!canvas) {
                showDebug('Error: Could not get canvas');
                return;
            }
            
            // Create thumbnail preview
            const imgElement = document.createElement('img');
            imgElement.src = canvas.toDataURL('image/jpeg');
            imgElement.className = 'w-32 h-32 object-cover rounded-md border border-gray-300';
            
            // Add to preview container
            document.getElementById('addedImagesContainer').appendChild(imgElement);
            
            // Convert to blob and store
            canvas.toBlob(function(blob) {
                processedImages.push(blob);
                
                // Show success message
                Toastify({
                    text: `Image ${currentImageIndex + 1} processed successfully`,
                    duration: 2000,
                    backgroundColor: "green",
                }).showToast();
                
                // Move to next image or finish
                moveToNextImage();
            }, 'image/jpeg', 0.9);
            
        } catch (error) {
            showDebug('Error saving image: ' + error.message);
            Toastify({
                text: "Error processing image",
                duration: 3000,
                backgroundColor: "red",
            }).showToast();
        }
    }

    // Move to the next image or finish processing
    function moveToNextImage() {
        // Destroy current cropper
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        
        // Increment index
        currentImageIndex++;
        
        // Check if we have more images to process
        if (currentImageIndex < imagesToProcess.length) {
            // Process next image
            processCurrentImage();
        } else {
            // All done
            document.getElementById('cropperContainer').classList.add('hidden');
            Toastify({
                text: "All images processed successfully",
                duration: 3000,
                backgroundColor: "green",
            }).showToast();
        }
    }

    // Handle form submission
    document.getElementById('addProductsForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        

        const errorFields =['product_name-error','brand-error','description-error','regularPrice-error', 'salePrice-error', 'quantity-error', 'category-error', 'image-error']
        errorFields.forEach(fieldId =>{
            
            document.getElementById(fieldId).textContent=''
           
        })
        
        // Check if we have processed images
        if (processedImages.length === 0) {
            Toastify({
                text: "Please select and crop at least one image",
                duration: 3000,
                backgroundColor: "red",
            }).showToast();
            return;
        }
        
        try {
            // Create form data from the form
            const formData = new FormData(this);
            
            // Remove original file input data
            formData.delete('image');
            
            // Add processed images
            processedImages.forEach((blob, index) => {
                formData.append('image', blob, `image-${index + 1}.jpg`);
            });
            console.log("Sending request to server...");
            // Submit the form
            const response = await fetch('/admin/addProducts', {
                method: 'POST',
                body: formData
            });
         
            // Process response
            if (!response.ok) {
                // const errorData = await response.json();
                // throw new Error(errorData.message || 'Server error');

                const errorData =await response.json()
                if(errorData.error){
                    errorData.error.forEach(err =>{
                        if(err.path === 'name'){
                            document.getElementById('product_name-error').textContent = err.msg
                        }
                        else if(err.path === 'brand') {
                        document.getElementById('brand-error').textContent = err.msg;
                        }
                         else if(err.path === 'description') {
                        document.getElementById('description-error').textContent = err.msg;
                        }
                         else if(err.path === 'regularPrice') {
                        document.getElementById('regularPrice-error').textContent = err.msg;
                        } 
                        else if(err.path === 'salePrice') {
                        document.getElementById('salePrice-error').textContent = err.msg;
                        }
                         else if(err.path === 'quantity') {
                        document.getElementById('quantity-error').textContent = err.msg;
                        }
                        else if(err.path === 'category') {
                        document.getElementById('category-error').textContent = err.msg;
                    }
                    })
                    return
                }

                throw new Error(errorData.message || 'Server Error')
            }
            
            const result = await response.json();
            
            if (result.success) {
                Swal.fire({
                    icon: "success",
                    title: "Success",
                    text: result.message
                }).then(() => {
                    window.location.href = "/admin/products";
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message
                });
            }
            
        } catch (error) {
            console.error("Submission error:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Something went wrong!'
            });
        }
    });
</script>

<%- include("../admin/partials/footer") %>