<%- include("../admin/partials/header") -%>
<head>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <!-- Cropper.js CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-primary-900 font-bold mb-6">Edit Product</h1>
        <form id="editProductForm" action="/admin/products/edit/<%= product._id %>" method="post" enctype="multipart/form-data" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" novalidate>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
                    Product Name
                </label>
                <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="name" type="text" name="name" value="<%= product.name %>" required>
                <div id="product_name-error" class="text-red-500 text-sm mt-1"></div>

            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="brand">
                    Brand
                </label>
                <select class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="brand" name="brand" required>
                    <option value="">Select a brand</option>
                    <% brands.forEach(function(brand) { %>
                        <option value="<%= brand._id %>" <%= product.brand._id.toString() === brand._id.toString() ? 'selected' : '' %>><%= brand.name %></option>
                    <% }); %>
                </select>
                <div id="brand-error" class="text-red-500 text-sm mt-1"></div>

            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="category">
                    Category
                </label>
                <select class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="category" name="category" required>
                    <option value="">Select a category</option>
                    <% categories.forEach(function(category) { %>
                        <option value="<%= category._id %>" <%= product.category._id.toString() === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
                    <% }); %>
                </select>
                <div id="category-error" class="text-red-500 text-sm mt-1"></div>

            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="description">
                    Description
                </label>
                <textarea class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="description" name="description" rows="4" required><%= product.description %></textarea>
                <div id="description-error" class="text-red-500 text-sm mt-1"></div>

            </div>
            <div class="mb-4 flex space-x-4">
                <div class="w-1/2">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="salePrice">
                        Sale Price
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="salePrice" type="number" name="salePrice" value="<%= product.salePrice %>" step="0.01" required>
                    <div id="salePrice-error" class="text-red-500 text-sm mt-1"></div>

                </div>
                <div class="w-1/2">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="regularPrice">
                        Regular Price
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="regularPrice" type="number" name="regularPrice" value="<%= product.regularPrice %>" step="0.01" required>
                    <div id="regularPrice-error" class="text-red-500 text-sm mt-1"></div>

                </div>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="quantity">
                    Quantity
                </label>
                <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="quantity" type="number" name="quantity" value="<%= product.quantity %>" required>
                <div id="quantity-error" class="text-red-500 text-sm mt-1"></div>

            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="image">
                  Product Images
                </label>
                <div class="flex items-center space-x-4" id="imagePreview">
                  <% if(product.image && product.image.length > 0) { %>
                    <% product.image.forEach(function(img, index) { %>
                      <div class="relative" id="image-container-<%= index %>">
                        <img src="<%= img %>" alt="Current product image" class="w-24 h-24 object-cover rounded" id="preview-<%= index %>">
                        <input type="hidden" name="existingImages[]" value="<%= img %>">
                        <button type="button" class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center -mt-2 -mr-2 replace-image-btn" data-index="<%= index %>">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                        </button>
                        <input type="file" class="hidden single-image-input" id="image-input-<%= index %>" data-index="<%= index %>" accept="image/*">
                      </div>
                    <% }); %>
                    <% for(let i = product.image.length; i < 3; i++) { %>
                      <div class="relative" id="image-container-<%= i %>">
                        <div class="w-24 h-24 bg-gray-200 rounded flex items-center justify-center" id="preview-<%= i %>">
                          <button type="button" class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center add-image-btn" data-index="<%= i %>">+</button>
                        </div>
                        <input type="file" class="hidden single-image-input" id="image-input-<%= i %>" data-index="<%= i %>" accept="image/*">
                      </div>
                    <% } %>
                  <% } else { %>
                    <% for(let i = 0; i < 3; i++) { %>
                      <div class="relative" id="image-container-<%= i %>">
                        <div class="w-24 h-24 bg-gray-200 rounded flex items-center justify-center" id="preview-<%= i %>">
                          <button type="button" class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center add-image-btn" data-index="<%= i %>">+</button>
                        </div>
                        <input type="file" class="hidden single-image-input" id="image-input-<%= i %>" data-index="<%= i %>" accept="image/*">
                      </div>
                    <% } %>
                  <% } %>
                </div>
            </div>
            <div class="flex items-center justify-between">
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                    Update Product
                </button>
                <a href="/admin/products" class="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800">
                    Cancel
                </a>
            </div>
        </form>
    </div>

    <!-- Crop Modal -->
    <div id="cropModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
      <div class="bg-white p-4">
        <div>
          <img id="cropImage" src="" alt="Crop image" class="max-w-full max-h-80">
        </div>
        <div class="mt-4 flex justify-end space-x-2">
          <button id="cancelCropBtn" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
          <button id="cropBtn" class="bg-blue-500 text-white px-4 py-2 rounded">Crop</button>
        </div>
      </div>
    </div>

    <!-- Cropper.js Script -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
      let cropper;
      let currentImageIndex = null;
      const croppedFiles = new Array(3).fill(null);

      // Handle replace image buttons
      document.querySelectorAll('.replace-image-btn, .add-image-btn').forEach(button => {
        button.addEventListener('click', function() {
          const index = this.dataset.index;
          document.getElementById(`image-input-${index}`).click();
        });
      });

      // Handle individual image inputs
      document.querySelectorAll('.single-image-input').forEach(input => {
        input.addEventListener('change', function(e) {
          if (e.target.files && e.target.files[0]) {
            const index = parseInt(this.dataset.index);
            currentImageIndex = index;
            const reader = new FileReader();
            reader.onload = function(event) {
              openCropModal(event.target.result, index);
            }
            reader.readAsDataURL(e.target.files[0]);
          }
        });
      });

      function openCropModal(imageSrc, previewIndex) {
        const cropModal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        cropImage.src = imageSrc;
        cropModal.classList.remove('hidden');
        if (cropper) { cropper.destroy(); }
        cropper = new Cropper(cropImage, {
          aspectRatio: 1,
          viewMode: 1,
        });
      }

      document.getElementById('cropBtn').addEventListener('click', function() {
        if (cropper && currentImageIndex !== null) {
          const canvas = cropper.getCroppedCanvas({
            width: 200,
            height: 200,
          });
          canvas.toBlob(function(blob) {
            const croppedImageUrl = URL.createObjectURL(blob);
            const previewElement = document.getElementById(`preview-${currentImageIndex}`);
            const container = document.getElementById(`image-container-${currentImageIndex}`);
            
            // If it's a div (empty slot), replace it with an img
            if (previewElement.tagName.toLowerCase() === 'div') {
              const imgElement = document.createElement('img');
              imgElement.id = `preview-${currentImageIndex}`;
              imgElement.className = "w-24 h-24 object-cover rounded";
              imgElement.src = croppedImageUrl;
              
              // Create replace button for new image
              const replaceBtn = document.createElement('button');
              replaceBtn.type = 'button';
              replaceBtn.className = 'absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center -mt-2 -mr-2 replace-image-btn';
              replaceBtn.dataset.index = currentImageIndex;
              replaceBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" /></svg>';
              replaceBtn.addEventListener('click', function() {
                document.getElementById(`image-input-${currentImageIndex}`).click();
              });
              
              // Clear container and add new elements
              while (container.firstChild) {
                container.removeChild(container.firstChild);
              }
              container.appendChild(imgElement);
              container.appendChild(replaceBtn);
              container.appendChild(document.getElementById(`image-input-${currentImageIndex}`));
            } else {
              previewElement.src = croppedImageUrl;
            }
            
            // Store the blob for form submission
            croppedFiles[currentImageIndex] = blob;
            
            // Remove existing image from the form data if it exists
            const existingImageInput = container.querySelector('input[name="existingImages[]"]');
            if (existingImageInput) {
              existingImageInput.remove();
            }

            cropper.destroy();
            cropper = null;
            document.getElementById('cropModal').classList.add('hidden');
          });
        }
      });

      document.getElementById('cancelCropBtn').addEventListener('click', function() {
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
        document.getElementById('cropModal').classList.add('hidden');
      });

      // Handle form submission
      document.getElementById('editProductForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const errorFields  = ['product_name_error','brand-error','description-error','regularPrice-error', 'salePrice-error', 'quantity-error', 'category-error', 'image-error']
        errorFields.forEach(fieldId => {
        const element = document.getElementById(fieldId);
          if (element) {
           element.textContent = '';
             }
            });


        const formData = new FormData(this);

        // Add cropped images to form data
        croppedFiles.forEach((blob, index) => {
          if (blob) {
            formData.append('image', blob, `image${index}.jpg`);
          }
        });

        try {
          const response = await fetch(this.action, {
            method: 'PUT',  
            body: formData
          });

          if(!response.ok){
            const errorData = await response.json()
            if(errorData.error){
              errorData.error.forEach(err =>{
                if(err.path === 'name'){
                            document.getElementById('product_name-error').textContent = err.msg
                        }
                        else if(err.path === 'brand') {
                        document.getElementById('brand-error').textContent = err.msg;
                        }
                         else if(err.path === 'description') {
                        document.getElementById('description-error').textContent = err.msg;
                        }
                         else if(err.path === 'regularPrice') {
                        document.getElementById('regularPrice-error').textContent = err.msg;
                        } 
                        else if(err.path === 'salePrice') {
                        document.getElementById('salePrice-error').textContent = err.msg;
                        }
                         else if(err.path === 'quantity') {
                        document.getElementById('quantity-error').textContent = err.msg;
                        }
                        else if(err.path === 'category') {
                        document.getElementById('category-error').textContent = err.msg;
                    }
              })
              return
            }
            throw new Error(errorData.message || 'Server error');
          }

          const data = await response.json();
          
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: data.message
            }).then(() => {
              window.location.href = '/admin/products';
            });
          } else {
            throw new Error(data.message || 'Failed to update product');
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update product'
          });
        }
      });
    </script>
</body>
<%- include("../admin/partials/footer") -%>
