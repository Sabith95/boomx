<%- include('../user/partials/header') %>
<%- include('../user/partials/head') %>
  <!-- Move script tags to bottom and use specific version for performance -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
  <style>
    /* Custom styles can be added here */
    .active-tab {
      background-color: #f3e8ff;
      color: #7e22ce;
      border-left: 4px solid #7e22ce;
    }
  </style>
</head>
<body class="min-h-screen bg-gray-50">
  <!-- Header -->
  <header class="bg-purple-700 text-white p-6">
    <div class="container mx-auto flex justify-between items-center">
      <h1 class="text-2xl font-bold">My Account</h1>
      
    </div>
  </header>

  <main class="container mx-auto py-8 px-4">
    <div class="grid grid-cols-1 md:grid-cols-12 gap-8">
      <!-- Profile Summary Card -->
      <div class="md:col-span-12 bg-white shadow-md rounded-lg">
        <div class="p-6">
          <div class="flex flex-col md:flex-row items-center gap-6">
            <div class="h-24 w-24 rounded-full border-4 border-purple-200 overflow-hidden">
              <img src="<%= user.image || '/placeholder.svg?height=100&width=100' %>" alt="<%= user.name %>" class="h-full w-full object-cover">
            </div>
            <div class="flex-1 text-center md:text-left">
              <h2 class="text-2xl font-bold text-gray-800"><%= user.name %></h2>
              <p class="text-gray-500"><%= user.email %></p>
              <!-- <p class="text-gray-500"><%= user.mobile %></p>
              <p class="text-sm text-gray-400 mt-1">Member since <%= user.created%></p> -->
            </div>
            <div class="flex gap-3 mt-4 md:mt-0">
              <!-- <a href="/profile/edit" class="inline-flex items-center px-4 py-2 border border-purple-200 text-purple-700 hover:bg-purple-50 rounded-md">
                <i data-lucide="edit" class="h-4 w-4 mr-2"></i>
                Edit Profile
              </a> -->
              <!-- <a href="/user/logout" class="inline-flex items-center px-4 py-2 text-gray-500 hover:text-gray-700 rounded-md">
                <i data-lucide="log-out" class="h-4 w-4 mr-2"></i>
                Sign Out
              </a> -->
            </div>
          </div>
        </div>
      </div>

      <!-- Sidebar Navigation -->
      <div class="md:col-span-3">
        <div class="bg-white shadow-md rounded-lg">
          <nav class="flex flex-col">
            <a href="/user/account/<%= user._id %>?tab=profile" 
               class="flex items-center gap-3 p-4 text-left hover:bg-purple-50 transition-colors <%= activeTab === 'profile' ? 'active-tab' : 'text-gray-600' %>">
              <i data-lucide="user" class="h-5 w-5"></i>
              <span>My Profile</span>
            </a>
            <a href="/user/account/<%= user._id %>?tab=orders" 
               class="flex items-center gap-3 p-4 text-left hover:bg-purple-50 transition-colors <%= activeTab === 'orders' ? 'active-tab' : 'text-gray-600' %>">
              <i data-lucide="shopping-cart" class="h-5 w-5"></i>
              <span>My Orders</span>
            </a>
            <a href="/user/account/<%= user._id %>?tab=address" 
               class="flex items-center gap-3 p-4 text-left hover:bg-purple-50 transition-colors <%= activeTab === 'address' ? 'active-tab' : 'text-gray-600' %>">
              <i data-lucide="map-pin" class="h-5 w-5"></i>
              <span>My Addresses</span>
            </a>
            <a href="/user/account/<%= user._id %>?tab=wallet" 
              class="flex items-center gap-3 p-4 text-left hover:bg-purple-50 transition-colors <%= activeTab === 'wallet' ? 'active-tab' : 'text-gray-600' %>">
             <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5">
               <rect x="2" y="5" width="20" height="14" rx="2" ry="2"></rect>
               <line x1="2" y1="10" x2="22" y2="10"></line>
               <rect x="16" y="14" width="2" height="2"></rect>
             </svg>
             <span>My Wallet</span>
           </a>
            <a href="/user/account/<%= user._id %>?tab=password" 
               class="flex items-center gap-3 p-4 text-left hover:bg-purple-50 transition-colors <%= activeTab === 'password' ? 'active-tab' : 'text-gray-600' %>">
              <i data-lucide="key" class="h-5 w-5"></i>
              <span>Change Password</span>
            </a>
          </nav>
        </div>
      </div>

      <!-- Main Content Area -->
      <div class="md:col-span-9">
        <div class="bg-white shadow-md rounded-lg min-h-[400px]">
          <div class="p-6">
            <% if (activeTab === 'profile') { %>
              <div>
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Personal Information</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <p class="text-sm text-gray-500 mb-1">Full Name</p>
                    <p class="text-gray-800"><%= user.name %></p>
                  </div>
                  <div>
                    <div class="text-sm text-gray-500 mb-1">Email Address</div>
                    <div class="flex items-center">
                      <p class="text-gray-800 mr-2"><%= user.email %></p>
                      <a href="/user/account/edit-email/<%= user._id %>" class="text-blue-500 hover:text-blue-700 text-sm" aria-label="Edit email">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                        </svg>
                      </a>
                    </div>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 mb-1">Phone Number</p>
                    <p class="text-gray-800"><%= user.mobile %></p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 mb-1">Date Joined</p>
                    <p class="text-gray-800"><%= user.createdAt %></p>
                  </div>
                </div>
                
                <% if (defaultAddress) { %>
                  <div class="mt-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Default Address</h3>
                    <p class="text-gray-800"><%= defaultAddress.streetAddress %></p>
                    <p class="text-gray-800">
                      <%= defaultAddress.city %>, <%= defaultAddress.state %> - <%= defaultAddress.pinCode %>
                    </p>
                    <p class="text-gray-800"><%= defaultAddress.country %></p>
                  </div>
                <% } %>
                
                <div class="mt-8">
                  <a href="/user/account/edit/<%= user._id %>" class="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md">
                    <i data-lucide="edit" class="h-4 w-4 mr-2"></i>
                    Edit Information
                  </a>
                </div>
              </div>
            <% } %>

            <% if (activeTab === 'wallet') { %>
              <div>
                <h3 class="text-xl font-semibold text-gray-800 mb-4">My Wallet</h3>
                <div class="bg-white shadow-sm rounded-lg p-6 max-w-md">
                  <div class="flex items-center justify-between mb-4">
                    <span class="text-sm text-gray-500">Available Balance</span>
                    <div class="bg-purple-100 text-purple-700 text-sm py-1 px-3 rounded-full">
                      Active
                    </div>
                  </div>
                  <div class="flex items-center mb-4">
                    <span class="text-3xl font-bold text-gray-800">â‚¹<%= wallet.balance || 0 %></span>
                  </div>
                  <div class="mt-4 pt-4 border-t border-gray-200">
                    <!-- <a href="/user/wallet/transactions" class="inline-flex items-center text-sm text-purple-600 hover:text-purple-800">
                      View transaction history
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                      </svg>
                    </a> -->
                  </div>
                </div>
              </div>
            <% } %>
            
            <% if (activeTab === 'orders') { %>
              <div>
                <h3 class="text-xl font-semibold text-gray-800 mb-4">My Orders</h3>
                <% orders.forEach(function(order) { %>
                  <div class="border border-gray-200 rounded-lg p-4 mb-4">
                    <div class="flex justify-between items-center mb-2">
                      <div>
                        <span class="text-sm text-gray-500">Order #</span>
                        <span class="font-medium ml-2"><%= order.orderNumber || order._id %></span>
                      </div>
                      <div class="bg-purple-100 text-purple-700 text-sm py-1 px-3 rounded-full">
                        <%= order.status %>
                      </div>
                    </div>
                    <div class="flex justify-between items-center text-sm">
                      <div>
                        <span class="text-gray-500">Date: </span>
                        <span><%= order.createdAt.toDateString() %></span>
                      </div>
                      <div>
                        <span class="text-gray-500">Total: </span>
                        <span class="font-medium">â‚¹<%= order.total.toFixed(2) %></span>
                      </div>
                    </div>
                    <div class="mt-4">
                      <h4 class="text-md font-semibold mb-2">Items:</h4>
                      <% order.items.forEach(function(item) { %>
                        <div class="flex justify-between border-b pb-2 mb-2">
                          <div class="flex-grow">
                            <span class="font-medium"><%= item.product.name %></span>
                            <span class="text-sm text-gray-600">x <%= item.quantity %></span>
                          </div>
                          <div class="flex items-center gap-3">
                            <span class="font-medium">â‚¹<%= item.subtotal.toFixed(2) %></span>
                          </div>
                        </div>
                      <% }); %>
                    </div>
                    <div class="mt-4 flex gap-3">
                      <a href="/user/order/detail/<%= order.orderNumber || order._id %>" class="inline-flex items-center px-3 py-1 text-sm border border-purple-200 text-purple-700 hover:bg-purple-50 rounded-md">
                        View Details
                      </a>
                      <% if (order.status === 'Cancelled' || order.status === 'Returned') { %>
                        <!-- Optionally show a message or nothing at all -->
                        <p>Order <%= order.status %></p>
                      <% } else { %>
                        <% if (order.status !== 'Delivered') { %>
                          <button 
                            onclick="openCancelOrderModal('<%= order.orderNumber || order._id %>')"
                            class="inline-flex items-center px-3 py-1 text-sm border border-red-200 text-red-600 hover:bg-red-50 rounded-md">
                            Cancel Order
                          </button>
                        <% } %>
                        <% if (order.status === 'Delivered') { %>
                          <button 
                            onclick="openReturnOrderModal('<%= order.orderNumber || order._id %>')"
                            class="inline-flex items-center px-3 py-1 text-sm border border-red-200 text-red-600 hover:bg-red-50 rounded-md">
                            Return Order
                          </button>
                        <% } %>
                      <% } %>
                      
                    </div>
                  </div>
                <% }); %>
              </div>
            
              <!-- Cancel Order Modal -->
              <div id="cancelOrderModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center hidden z-50">
                <div class="bg-white rounded-lg p-6 w-full max-w-md">
                  <h3 class="text-lg font-medium text-gray-900 mb-4">Cancel Order</h3>
                  <p class="text-sm text-gray-600 mb-4">Please tell us why you're cancelling this order:</p>
                  
                  <form id="cancelOrderForm" action="/user/order/cancel/<%= orders.orderNumber || orders._id  %>" method="POST">
                    <input type="hidden" id="orderIdToCancel" name="orderId" value="">
                    
                    <div class="mb-4">
                      <div class="flex items-center mb-2">
                        <input id="reason1" type="radio" name="cancelReason" value="Changed my mind" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
                        <label for="reason1" class="ml-2 text-sm text-gray-700">Changed my mind</label>
                      </div>
                      <div class="flex items-center mb-2">
                        <input id="reason2" type="radio" name="cancelReason" value="Found better price elsewhere" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
                        <label for="reason2" class="ml-2 text-sm text-gray-700">Found better price elsewhere</label>
                      </div>
                      <div class="flex items-center mb-2">
                        <input id="reason3" type="radio" name="cancelReason" value="Delivery time too long" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
                        <label for="reason3" class="ml-2 text-sm text-gray-700">Delivery time too long</label>
                      </div>
                      <div class="flex items-center mb-2">
                        <input id="reason4" type="radio" name="cancelReason" value="Ordered by mistake" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
                        <label for="reason4" class="ml-2 text-sm text-gray-700">Ordered by mistake</label>
                      </div>
                      <div class="flex items-center">
                        <input id="reasonOther" type="radio" name="cancelReason" value="other" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
                        <label for="reasonOther" class="ml-2 text-sm text-gray-700">Other reason</label>
                      </div>
                    </div>
                    
                    <div id="otherReasonContainer" class="mb-4 hidden">
                      <label for="otherReason" class="block text-sm font-medium text-gray-700 mb-1">Please specify:</label>
                      <textarea id="otherReason" name="otherReason" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"></textarea>
                    </div>
                    
                    <div class="flex justify-end gap-3 mt-6">
                      <button type="button" onclick="closeCancelOrderModal()" class="inline-flex justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
                        Cancel
                      </button>
                      <button type="submit" class="inline-flex justify-center px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Confirm Cancellation
                      </button>
                    </div>
                  </form>
                </div>
              </div>

              <!-- Return Order Modal -->
<div id="returnOrderModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center hidden z-50">
  <div class="bg-white rounded-lg p-6 w-full max-w-md">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Return Order</h3>
    <p class="text-sm text-gray-600 mb-4">Please tell us why you're returning this order:</p>
    
    <form id="returnOrderForm" action="/user/order/return/<%= orders.orderNumber || orders._id %>" method="POST">
      <input type="hidden" id="orderIdToReturn" name="orderId" value="">
      
      <div class="mb-4">
        <div class="flex items-center mb-2">
          <input id="returnReason1" type="radio" name="returnReason" value="Changed my mind" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
          <label for="returnReason1" class="ml-2 text-sm text-gray-700">Changed my mind</label>
        </div>
        <div class="flex items-center mb-2">
          <input id="returnReason2" type="radio" name="returnReason" value="Defective item" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
          <label for="returnReason2" class="ml-2 text-sm text-gray-700">Defective item</label>
        </div>
        <div class="flex items-center mb-2">
          <input id="returnReason3" type="radio" name="returnReason" value="Wrong item received" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
          <label for="returnReason3" class="ml-2 text-sm text-gray-700">Wrong item received</label>
        </div>
        <div class="flex items-center mb-2">
          <input id="returnReason4" type="radio" name="returnReason" value="Not as described" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
          <label for="returnReason4" class="ml-2 text-sm text-gray-700">Not as described</label>
        </div>
        <div class="flex items-center">
          <input id="returnReasonOther" type="radio" name="returnReason" value="other" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300">
          <label for="returnReasonOther" class="ml-2 text-sm text-gray-700">Other reason</label>
        </div>
      </div>
      
      <div id="returnOtherReasonContainer" class="mb-4 hidden">
        <label for="returnOtherReason" class="block text-sm font-medium text-gray-700 mb-1">Please specify:</label>
        <textarea id="returnOtherReason" name="otherReason" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"></textarea>
      </div>
      
      <div class="flex justify-end gap-3 mt-6">
        <button type="button" onclick="closeReturnOrderModal()" class="inline-flex justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
          Cancel
        </button>
        <button type="submit" class="inline-flex justify-center px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
          Confirm Return
        </button>
      </div>
    </form>
  </div>
</div>
              <% } %>


            <% if (activeTab === 'address') { %>
              <div>
                <h3 class="text-xl font-semibold text-gray-800 mb-4">My Addresses</h3>
                <% if (!user.addresses || user.addresses.length === 0) { %>
                  <p class="text-gray-600 text-sm mb-4">You don't have any registered address.</p>
                  <div class="border border-dashed border-gray-300 rounded-lg p-4 flex items-center justify-center">
                    <a href="/user/address/new/<%= user._id %>" class="text-purple-700 hover:bg-purple-50 px-4 py-2 rounded-md">
                      + Add New Address
                    </a>
                  </div>
                <% } else { %>
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <% user.addresses.forEach(function(address) { %>
                      <div class="border border-gray-200 rounded-lg p-4 relative">
                        <% if (address.isDefault) { %>
                          <div class="absolute top-4 right-4 bg-purple-100 text-purple-700 text-xs py-1 px-2 rounded">
                            Default
                          </div>
                        <% } %>
                        <h4 class="font-medium mb-2"><%= address.name %> <span class="text-gray-500 text-sm">(<%= address.addressType %>)</span></h4>
                        <p class="text-gray-600 text-sm">
                          <%= address.streetAddress %><br>
                          <%= address.city %>, <%= address.state %>, <%= address.pinCode %><br>
                          <%= address.country %><br>
                          <%= address.phone %>
                        </p>
                        <div class="mt-4 flex gap-2">
                          <a href="/user/address/<%= address.id %>/edit" class=" inline-flex items-center px-3 py-1 text-sm border border-purple-200 text-purple-700 hover:bg-purple-50 rounded-md">
                            Edit
                          </a>
                          <button type="button" 
                          data-url="/user/address/<%= address.id %>/delete" 
                          class="delete-address-btn inline-flex items-center px-3 py-1 text-sm text-gray-500 rounded-md">
                           Delete
                         </button>
                  
                          
                          
                          <% if (!address.isDefault) { %>
                            <a href="/user/address/<%= address.id %>/set-default" class="set-default inline-flex items-center px-3 py-1 text-sm text-purple-700 rounded-md">
                              Set as Default
                            </a>
                          <% } %>
                        </div>
                      </div>
                    <% }); %>
                    <div class="border border-dashed border-gray-300 rounded-lg p-4 flex items-center justify-center">
                      <a href="/user/address/new/<%= user._id %>" class="text-purple-700 hover:bg-purple-50 px-4 py-2 rounded-md">
                        + Add New Address
                      </a>
                    </div>
                  </div>
                <% } %>
              </div>
            <% } %>

            <% if (activeTab === 'password') { %>
              <div>
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Change Password</h3>
                <form action="/user/account/change-password/<%= user._id %>" method="POST" class="max-w-md space-y-4" id="changePasswordForm">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Current Password</label>
                    <input 
                      type="password" 
                      id="currentPassword"
                      name="currentPassword"
                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter your current password"
                      required
                    >
                    <div id="currPasswordError" class="error-message" style="color:red; font-size:0.9em;"></div>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                    <input 
                      type="password" 
                      name="newPassword"
                      id="newPassword"
                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter new password"
                      required
                    >
                    <div id="newPasswordError" class="error-message" style="color:red; font-size:0.9em;"></div>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                    <input 
                      type="password" 
                      name="confirmPassword"
                      id="confirmPassword"
                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Confirm new password"
                      required
                    >
                    <div id="confirmPasswordError" class="error-message" style="color:red; font-size:0.9em;"></div>
                  </div>
                  
                  <div class="pt-2">
                    <button type="submit" class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md">
                      Update Password
                    </button>
                  </div>
                  
                  <!-- <div class="pt-2">
                    <a href="/forgot-password" class="text-sm text-purple-600 hover:underline">Forgot your password?</a>
                  </div> -->
                </form>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Scripts moved to end of body for better page load performance -->
  <!-- Load specific version of Lucide for better performance and caching -->
  <script src="https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.all.min.js"></script>
  
  <!-- Initialize Lucide Icons correctly -->
  <script>
    // Wait for DOM content to be fully loaded before initializing icons
    document.addEventListener('DOMContentLoaded', function() {
      lucide.createIcons();
    });
  </script>
  
  <script>
      console.log("Script loaded");

    //cancelling orders

    function openCancelOrderModal(orderId) {
    document.getElementById('orderIdToCancel').value = orderId;
    document.getElementById('cancelOrderModal').classList.remove('hidden');
  }
  
  function closeCancelOrderModal() {
    document.getElementById('cancelOrderModal').classList.add('hidden');
    document.getElementById('cancelOrderForm').reset();
    document.getElementById('otherReasonContainer').classList.add('hidden');
  }
  
  
  // Show/hide "other reason" textarea
  document.addEventListener('DOMContentLoaded', function() {
    // For order cancellation
    var orderRadios = document.querySelectorAll('#cancelOrderForm input[name="cancelReason"]');
    if (orderRadios) {
      orderRadios.forEach(function(radio) {
        radio.addEventListener('change', function() {
          if (this.value === 'other' && this.checked) {
            document.getElementById('otherReasonContainer').classList.remove('hidden');
          } else {
            document.getElementById('otherReasonContainer').classList.add('hidden');
          }
        });
      });
    }
  });

  document.addEventListener('DOMContentLoaded', () => {
    
  const cancelOrderForm = document.getElementById("cancelOrderForm");

  cancelOrderForm.addEventListener("submit", async (event) => {
    event.preventDefault();

    const orderId = document.getElementById("orderIdToCancel").value;
    const cancelReason = document.querySelector('input[name="cancelReason"]:checked')?.value;
    const otherReason = document.getElementById("otherReason").value;

    const requestData = {
      orderId,
      cancelReason: cancelReason === "other" ? otherReason : cancelReason,
    };

    try {
      const response = await fetch(`/user/order/cancel/${orderId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });

      const data = await response.json();

      if (data.success) {
        Swal.fire({
          icon: "success",
          title: "Order Canceled",
          text: data.message,
        }).then(() => {
          window.location.reload();
        });
      } else {
        throw new Error(data.error || "Failed to cancel order");
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: error.message || "Failed to cancel order",
      });
    }
  });
});
  
 //return order

 
// Return order functions
function openReturnOrderModal(orderId) {
  document.getElementById('orderIdToReturn').value = orderId;
  document.getElementById('returnOrderModal').classList.remove('hidden');
}

function closeReturnOrderModal() {
  document.getElementById('returnOrderModal').classList.add('hidden');
  document.getElementById('returnOrderForm').reset();
  document.getElementById('returnOtherReasonContainer').classList.add('hidden');
}

// Add event listeners for the radio buttons in return form
document.addEventListener('DOMContentLoaded', function() {
  // For return form radio buttons
  const returnRadios = document.querySelectorAll('#returnOrderForm input[name="returnReason"]');
  if (returnRadios) {
    returnRadios.forEach(function(radio) {
      radio.addEventListener('change', function() {
        if (this.value === 'other' && this.checked) {
          document.getElementById('returnOtherReasonContainer').classList.remove('hidden');
        } else {
          document.getElementById('returnOtherReasonContainer').classList.add('hidden');
        }
      });
    });
  }
  
  // For return form submission
  const returnOrderForm = document.getElementById('returnOrderForm');
  if (returnOrderForm) {
    returnOrderForm.addEventListener('submit', function(event) {
      event.preventDefault();
      
      const orderId = document.getElementById('orderIdToReturn').value;
      const returnReason = document.querySelector('input[name="returnReason"]:checked')?.value;
      const otherReason = document.getElementById('returnOtherReason').value;
      
      const requestData = {
        orderId,
        returnReason: returnReason === 'other' ? otherReason : returnReason
      };
      
      fetch(`/user/order/return/${orderId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Return Requested',
            text: data.message
          }).then(() => {
            window.location.reload();
          });
        } else {
          throw new Error(data.error || 'Failed to request return');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Failed to request return'
        });
      });
    });
  }
});



// set default address 
  document.addEventListener('DOMContentLoaded', () => {
    const defaultLinks = document.querySelectorAll('.set-default');
    
    defaultLinks.forEach(link => {
      link.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent default link behavior

        Swal.fire({
          title: 'Are you sure?',
          text: "Do you want to set this address as default?",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, set it!',
          cancelButtonText: 'No, cancel!'
        }).then((result) => {
          if (result.isConfirmed) {
            // Use fetch with the PATCH method to call your endpoint
            fetch(this.href, {
              method: 'PATCH'
            })
              .then(response => {
                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }
                return response.json();
              })
              .then(data => {
                if (data.success) {
                  Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message
                  }).then(() => {
                    // Reload the page or update the UI as needed
                    window.location.reload();
                  });
                } else {
                  throw new Error(data.message || 'Failed to set default');
                }
              })
              .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: error.message || 'An error occurred'
                });
              });
          }
        });
      });
    });
  });
  


  //changing password

    
  
  console.log("DOMContentLoaded listener removed for testing");
  const changePasswordForm = document.getElementById('changePasswordForm');
  if (changePasswordForm) {
    changePasswordForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Clear previous error messages
      document.getElementById('currPasswordError').innerText = '';
      document.getElementById('newPasswordError').innerText = '';
      document.getElementById('confirmPasswordError').innerText = '';
      
      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const payload = { currentPassword, newPassword, confirmPassword };
      
      try {
        const response = await fetch(`/user/account/change-password/<%= user._id %>`, {
          method: "PATCH",
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        
        const result = await response.json();
        
        if (!response.ok) {
          if (result.errors && Array.isArray(result.errors)) {
            result.errors.forEach(error => {
              if (error.param === 'currentPassword') {
                document.getElementById('currPasswordError').innerText = error.msg;
              }
              if (error.param === 'newPassword') {
                document.getElementById('newPasswordError').innerText = error.msg;
              }
              if (error.param === 'confirmPassword') {
                document.getElementById('confirmPasswordError').innerText = error.msg;
              }
            });
          } else {
            document.getElementById('currPasswordError').innerText = result.error || 'An error occurred. Please try again.';
          }
        } else {
          Swal.fire({
            icon: 'success',
            title: 'Password Changed',
            text: result.message || 'Your password has been changed successfully.',
            confirmButtonText: 'OK'
          }).then((swalResult) => {
            if (swalResult.isConfirmed) {
              window.location.href = `/user/account/<%= user._id %>?tab=profile`;
            }
          });
        }
      } catch (error) {
        console.error('Fetch error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong. Please try again later.',
          confirmButtonText: 'OK'
        });
      }
    });
  } else {
    console.error('Change Password Form not found.');
  }


    
    
  

//deletitng address

document.addEventListener('DOMContentLoaded', () => {


  const deleteButtons = document.querySelectorAll('.delete-address-btn');
  

  deleteButtons.forEach(button => {
    button.addEventListener('click', function(event) {
      event.preventDefault(); // Prevent default button behavior
      

      const url = this.getAttribute('data-url');
      
      Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to delete this address?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Delete it',
        cancelButtonText: 'No, cancel!'
      }).then((result) => {
        console.log("SweetAlert result:", result); // Debug log
        if (result.isConfirmed) {
          // Send a POST request using fetch
          fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          })
            .then(response => {
              console.log("Fetch response:", response); // Debug log
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              console.log("Data received:", data); // Debug log
              if (data.success) {
                Swal.fire({
                  icon: 'success',
                  title: 'Success',
                  text: data.message
                }).then(() => {
                  window.location.reload();
                });
              } else {
                throw new Error(data.message || 'Failed to delete');
              }
            })
            .catch(error => {
              console.error('Error:', error);
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'An error occurred'
              });
            });
        }
      });
    });
  });
});

  </script>
<%- include('../user/partials/foot') %>
<%- include('../user/partials/footer') %>